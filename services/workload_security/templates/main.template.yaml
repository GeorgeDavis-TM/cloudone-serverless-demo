AWSTemplateFormatVersion: 2010-09-09
Description: Deploy Cloud One Workload Security Demo
Parameters:
  VpcId:
    Type: 'AWS::EC2::VPC::Id'
    Description: VpcId of your existing Virtual Private Cloud (VPC)
    ConstraintDescription: must be the VPC Id of an existing Virtual Private Cloud.
  SubnetId:
    Type: 'AWS::EC2::Subnet::Id'
    Description: >-
      SubnetId of an existing subnet (for the primary network) in your Virtual
      Private Cloud (VPC)
    ConstraintDescription: must be an existing subnet in the selected Virtual Private Cloud.
  KeyPairName:
    Type: 'String'
    Description: >-
      Name of the Keypair
    ConstraintDescription: must be an existing keypair in the selected region.
  WSTenantId:
    Type: String
    Description: Tenant ID of the Workload Security Tenant
    ConstraintDescription: must be a valid Tenant Id from Workload Security
    Default: 69FACFF9-CC25-89C3-E1F1-4FC5DFA33B0C
  WSPolicyId:
    Type: Number
    Description: Policy ID of the security policy to be deployed on the EC2 Instance
    ConstraintDescription: must be valid Policy Id from Workload Security.
    Default: 34
  WSToken:
    Type: String
    Description: Token from Workload Security Console
    ConstraintDescription: must be valid token from Workload Security.
    Default: 850DB008-56EE-272F-43F7-58B828ECA236
  WSApiKey:
    Type: String
    Description: API Key from Workload Security Console
    ConstraintDescription: must be valid API Key from Workload Security.
    Default: 69FACFF9-CC25-89C3-E1F1-4FC5DFA33B0C:DE722560-89B3-3073-F395-FE9E3F2F1171:Lb7Y3M1TCRpYIZA5CrUfBlHkn/TH8I1mO7hR2gFNgpk=
Mappings:
  ImageId:
    us-east-1:
      HVM64: ami-01893222c83843146
    us-east-2:
      HVM64: ami-06ad6c264ce8dab0d
    us-west-1:
      HVM64: ami-0ff7fc535d3457221
    us-west-2:
      HVM64: ami-0b3456eff9b6f87f1
    ca-central-1:
      HVM64: ami-0b41a64dce89f27e3
Resources:
  EC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !FindInMap 
        - ImageId
        - !Ref 'AWS::Region'
        - HVM64
      InstanceInitiatedShutdownBehavior: stop
      # DisableApiTermination: true
      InstanceType: t3a.medium
      IamInstanceProfile: !Ref SSMIAMInstanceProfile
      KeyName: !Ref KeyPairName
      SubnetId: !Ref SubnetId
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash
            - |
              ACTIVATIONURL='dsm://agents.deepsecurity.trendmicro.com:443/'
            - |
              MANAGERURL='https://app.deepsecurity.trendmicro.com:443'
            - |
              CURLOPTIONS='--silent --tlsv1.2'
            - |
              linuxPlatform='';
            - |
              isRPM='';
            - |
              if [[ $(/usr/bin/id -u) -ne 0 ]]; then
            - >
              echo You are not running as the root user.  Please try again with
              root privileges.;
            - >
              logger -t You are not running as the root user.  Please try again
              with root privileges.;
            - |
              exit 1;
            - |
              fi;
            - |
              if ! type curl >/dev/null 2>&1; then
            - |
              echo "Please install CURL before running this script."
            - |
              logger -t Please install CURL before running this script
            - |
              exit 1
            - |
              fi
            - >
              CURLOUT=$(eval curl
              $MANAGERURL/software/deploymentscript/platform/linuxdetectscriptv1/
              -o /tmp/PlatformDetection $CURLOPTIONS;)
            - |
              err=$?
            - |
              if [[ $err -eq 60 ]]; then
            - >
              echo "TLS certificate validation for the agent package download
              has failed. Please check that your Deep Security Manager TLS
              certificate is signed by a trusted root certificate authority. For
              more information, search for \"deployment scripts\" in the Deep
              Security Help Center."
            - >
              logger -t TLS certificate validation for the agent package
              download has failed. Please check that your Deep Security Manager
              TLS certificate is signed by a trusted root certificate authority.
              For more information, search for \"deployment scripts\" in the
              Deep Security Help Center.
            - |
              exit 1;
            - |
              fi
            - |
              if [ -s /tmp/PlatformDetection ]; then
            - |
              . /tmp/PlatformDetection
            - |
              else
            - |
              echo "Failed to download the agent installation support script."
            - >
              logger -t Failed to download the Deep Security Agent installation
              support script
            - |
              exit 1
            - |
              fi
            - |
              platform_detect
            - |
              if [[ -z "${linuxPlatform}" ]] || [[ -z "${isRPM}" ]]; then
            - |
              echo Unsupported platform is detected
            - |
              logger -t Unsupported platform is detected
            - |
              exit 1
            - |
              fi
            - |
              echo Downloading agent package...
            - |
              if [[ $isRPM == 1 ]]; then package='agent.rpm'
            - |
              else package='agent.deb'
            - |
              fi
            - >
              curl -H "Agent-Version-Control: on"
              $MANAGERURL/software/agent/${runningPlatform}${majorVersion}/${archType}/$package?tenantID=81444
              -o /tmp/$package $CURLOPTIONS
            - |
              echo Installing agent package...
            - |
              rc=1
            - |
              if [[ $isRPM == 1 && -s /tmp/agent.rpm ]]; then
            - |
              rpm -ihv /tmp/agent.rpm
            - |
              rc=$?
            - |
              elif [[ -s /tmp/agent.deb ]]; then
            - |
              dpkg -i /tmp/agent.deb
            - |
              rc=$?
            - |
              else
            - >
              echo Failed to download the agent package. Please make sure the
              package is imported in the Deep Security Manager
            - >
              logger -t Failed to download the agent package. Please make sure
              the package is imported in the Deep Security Manager
            - |
              exit 1
            - |
              fi
            - |
              if [[ ${rc} != 0 ]]; then
            - |
              echo Failed to install the agent package
            - |
              logger -t Failed to install the agent package
            - |
              exit 1
            - |
              fi
            - |
              echo Install the agent package successfully
            - |
              sleep 15
            - |
              /opt/ds_agent/dsa_control -r
            - '/opt/ds_agent/dsa_control -a $ACTIVATIONURL "tenantID:'
            - !Ref WSTenantId
            - '" "token:'
            - !Ref WSToken
            - '" "policyid:'
            - !Ref WSPolicyId
            - |
              "
            - >-
              # /opt/ds_agent/dsa_control -a
              dsm://agents.deepsecurity.trendmicro.com:443/ "tenantID:
            - !Ref WSTenantId
            - '" "token:'
            - !Ref WSToken
            - '" "policyid:'
            - !Ref WSPolicyId
            - |
              "
      Tags:
        - Key: Owner
          Value: TrendMicro
        - Key: Product
          Value: cloudone-serverless-demo
        - Key: Name
          Value: cloudone-serverless-demo
  EC2SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security Group - cloudone-serverless-demo
      GroupName: cloudone-serverless-demo
      SecurityGroupIngress:
        - CidrIp: 99.251.123.74/32
          Description: Manual SSH Access
          FromPort: 22
          ToPort: 22
          IpProtocol: TCP
      Tags:
        - Key: Owner
          Value: TrendMicro
        - Key: Product
          Value: cloudone-serverless-demo
        - Key: Name
          Value: cloudone-serverless-demo
      VpcId: !Ref VpcId
  SSMIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Description: cloudone-serverless-demo-SSM-Role
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore'
        - 'arn:aws:iam::aws:policy/AmazonSSMPatchAssociation'
        - 'arn:aws:iam::aws:policy/AdministratorAccess'
      Path: /
      RoleName: cloudone-serverless-demo-SSM-Role
      Tags:
        - Key: Owner
          Value: TrendMicro
        - Key: Product
          Value: cloudone-serverless-demo
        - Key: Name
          Value: cloudone-serverless-demo
  SSMIAMInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      InstanceProfileName: cloudone-serverless-demo-SSM-InstanceProfile
      Path: /
      Roles:
        - !Ref SSMIAMRole
  SSMWSApiKey:
    Type: AWS::SSM::Parameter
    Properties:
      Name: WSApiKey
      Type: String
      Value: !Ref WSApiKey
  SSMWSToken:
    Type: AWS::SSM::Parameter
    Properties:
      Name: WSToken
      Type: String
      Value: !Ref WSToken
  InstallTools:
    Type: 'AWS::SSM::Document'
    Properties:
      Content:
        schemaVersion: '2.2'
        description: 0. Install Tools
        parameters:
          ssmWsApiKey:
            description: (Required) Specify your Cloud One Workload Security API Key.
            type: String
            default: "{{ssm:WSApiKey}}"
          ssmWsToken:
            description: (Required) Specify your Cloud One Workload Security Token.
            type: String
            default: "{{ssm:WSToken}}"
        mainSteps:
          - action: 'aws:downloadContent'
            name: downloadGitHubContent
            inputs:
              sourceType: 'GitHub'
              sourceInfo: >-
                {
                  "owner": "GeorgeDavis-TM",
                  "repository": "cloudone-serverless-demo",
                  "getOptions": "branch:main",
                  "path": "scripts/install-dsa.sh",
                  "tokenInfo": "{{ssm-secure:georgedGitHubPAT}}"
                }
              destinationPath: '/home/ec2-user/'
          - action: 'aws:runShellScript'
            name: runShellScript
            inputs:              
              runCommand:          
                - ./install-dsa.sh {{ssmWsApiKey}} {{ssmWsToken}}
              workingDirectory: '/home/ec2-user/'
              timeoutSeconds: '600'
      DocumentFormat: JSON
      DocumentType: Command
      Name: InstallTools
      Tags:
        - Key: Owner
          Value: TrendMicro
        - Key: Product
          Value: cloudone-serverless-demo
        - Key: Name
          Value: cloudone-serverless-demo
      TargetType: '/AWS::EC2::Instance'
    DependsOn:
    - SSMWSApiKey
    - SSMWSToken
  InstallNodejs:
    Type: 'AWS::SSM::Document'
    Properties:
      Content:
        schemaVersion: '2.2'
        description: 1. Install Node.js        
        mainSteps:
          - action: 'aws:downloadContent'
            name: downloadGitHubContent
            inputs:
              sourceType: 'GitHub'
              sourceInfo: >-
                {
                  "owner": "GeorgeDavis-TM",
                  "repository": "cloudone-serverless-demo",
                  "getOptions": "branch:main",
                  "path": "scripts/install-nvm.sh",
                  "tokenInfo": "{{ssm-secure:georgedGitHubPAT}}"
                }
              destinationPath: '/home/ec2-user/'
          - action: 'aws:runShellScript'
            name: runShellScript
            inputs:              
              runCommand:                                  
                - ./install-nvm.sh
              workingDirectory: '/home/ec2-user/'
              timeoutSeconds: '600'
      DocumentFormat: JSON
      DocumentType: Command
      Name: InstallNodejs
      Tags:
        - Key: Owner
          Value: TrendMicro
        - Key: Product
          Value: cloudone-serverless-demo
        - Key: Name
          Value: cloudone-serverless-demo
      TargetType: '/AWS::EC2::Instance'
  InstallVenv:
    Type: 'AWS::SSM::Document'
    Properties:
      Content:
        schemaVersion: '2.2'
        description: 2. Install Virtualenv        
        mainSteps:
          - action: 'aws:runShellScript'
            name: runCommands
            inputs:
              timeoutSeconds: '60'
              runCommand:
                - pip3 install virtualenv
      DocumentFormat: JSON
      DocumentType: Command
      Name: InstallVenv
      Tags:
        - Key: Owner
          Value: TrendMicro
        - Key: Product
          Value: cloudone-serverless-demo
        - Key: Name
          Value: cloudone-serverless-demo
      TargetType: '/AWS::EC2::Instance'
  DeployFSS:
    Type: 'AWS::SSM::Document'
    Properties:
      Content:
        schemaVersion: '2.2'
        description: Deploy FSS Attack Serverless Demo    
        mainSteps:
          - action: 'aws:downloadContent'
            name: downloadGitHubContent
            inputs:
              sourceType: 'GitHub'
              sourceInfo: >-
                {
                  "owner": "GeorgeDavis-TM",
                  "repository": "cloudone-serverless-demo",
                  "getOptions": "branch:main",
                  "path": "scripts/deploy-fss.sh",
                  "tokenInfo": "{{ssm-secure:georgedGitHubPAT}}"
                }
              destinationPath: '/home/ec2-user/'
          - action: 'aws:runShellScript'
            name: runShellScript
            inputs:              
              runCommand:                                  
                - ./deploy-fss.sh
              workingDirectory: '/home/ec2-user/'
              timeoutSeconds: '600'
      DocumentFormat: JSON
      DocumentType: Command
      Name: DeployFSS
      Tags:
        - Key: Owner
          Value: TrendMicro
        - Key: Product
          Value: cloudone-serverless-demo
        - Key: Name
          Value: cloudone-serverless-demo
      TargetType: '/AWS::EC2::Instance'
  DeployWS:
    Type: 'AWS::SSM::Document'
    Properties:
      Content:
        schemaVersion: '2.2'
        description: Deploy Workload Attack
        parameters:
          ssmWsApiKey:
            description: (Required) Specify your Cloud One Workload Security API Key.
            type: String
            default: "{{ssm:WSApiKey}}"
        mainSteps:
          - action: 'aws:downloadContent'
            name: downloadGitHubContent
            inputs:
              sourceType: 'GitHub'
              sourceInfo: >-
                {
                  "owner": "GeorgeDavis-TM",
                  "repository": "cloudone-serverless-demo",
                  "getOptions": "branch:main",
                  "path": "scripts/deploy-ws.sh",
                  "tokenInfo": "{{ssm-secure:georgedGitHubPAT}}"
                }
              destinationPath: '/home/ec2-user/'
          - action: 'aws:runShellScript'
            name: runShellScript
            inputs:              
              runCommand:                                  
                - ./deploy-ws.sh {{ssmWsApiKey}}
              workingDirectory: '/home/ec2-user/'
              timeoutSeconds: '600'
      DocumentFormat: JSON
      DocumentType: Command
      Name: DeployWS
      Tags:
        - Key: Owner
          Value: TrendMicro
        - Key: Product
          Value: cloudone-serverless-demo
        - Key: Name
          Value: cloudone-serverless-demo
      TargetType: '/AWS::EC2::Instance'
  RunWSSensorCheck:
    Type: 'AWS::SSM::Document'
    Properties:
      Content:
        schemaVersion: '2.2'
        description: 0.5 Check  if Activity Monitoring is enabled on instance
        parameters:
          commands:
            type: String
            description: 0.5. Check  if Activity Monitoring is enabled on instance
            default: >-
              /opt/ds_agent/sendCommand --get GetConfiguration | grep
              "name='SENSOR'"
        mainSteps:
          - action: 'aws:runShellScript'
            name: runCommands
            inputs:
              timeoutSeconds: '60'
              runCommand:
                - '{{ commands }}'
      DocumentFormat: JSON
      DocumentType: Command
      Name: RunWSSensorCheck
      Tags:
        - Key: Owner
          Value: TrendMicro
        - Key: Product
          Value: cloudone-serverless-demo
        - Key: Name
          Value: cloudone-serverless-demo
      TargetType: '/AWS::EC2::Instance'
Outputs:
  EC2Instance:
    Description: Instance Id of the Challenge EC2 Instance
    Value: !Ref EC2Instance
  EC2SecurityGroup:
    Description: Security Group Id of the Challenge EC2 Security Group
    Value: !Ref EC2SecurityGroup
